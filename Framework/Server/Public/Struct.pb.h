// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class ObjectInfo;
struct ObjectInfoDefaultTypeInternal;
extern ObjectInfoDefaultTypeInternal _ObjectInfo_default_instance_;
class Player;
struct PlayerDefaultTypeInternal;
extern PlayerDefaultTypeInternal _Player_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::ObjectInfo* Arena::CreateMaybeMessage<::Protocol::ObjectInfo>(Arena*);
template<> ::Protocol::Player* Arena::CreateMaybeMessage<::Protocol::Player>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class Player final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Player) */ {
 public:
  inline Player() : Player(nullptr) {}
  ~Player() override;
  explicit constexpr Player(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Player(const Player& from);
  Player(Player&& from) noexcept
    : Player() {
    *this = ::std::move(from);
  }

  inline Player& operator=(const Player& from) {
    CopyFrom(from);
    return *this;
  }
  inline Player& operator=(Player&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Player& default_instance() {
    return *internal_default_instance();
  }
  static inline const Player* internal_default_instance() {
    return reinterpret_cast<const Player*>(
               &_Player_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Player& a, Player& b) {
    a.Swap(&b);
  }
  inline void Swap(Player* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Player* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Player* New() const final {
    return new Player();
  }

  Player* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Player>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Player& from);
  void MergeFrom(const Player& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Player* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Player";
  }
  protected:
  explicit Player(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kPlayerTypeFieldNumber = 3,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // .Protocol.PlayerType playerType = 3;
  void clear_playertype();
  ::Protocol::PlayerType playertype() const;
  void set_playertype(::Protocol::PlayerType value);
  private:
  ::Protocol::PlayerType _internal_playertype() const;
  void _internal_set_playertype(::Protocol::PlayerType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Player)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  int playertype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class ObjectInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.ObjectInfo) */ {
 public:
  inline ObjectInfo() : ObjectInfo(nullptr) {}
  ~ObjectInfo() override;
  explicit constexpr ObjectInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectInfo(const ObjectInfo& from);
  ObjectInfo(ObjectInfo&& from) noexcept
    : ObjectInfo() {
    *this = ::std::move(from);
  }

  inline ObjectInfo& operator=(const ObjectInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectInfo& operator=(ObjectInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectInfo* internal_default_instance() {
    return reinterpret_cast<const ObjectInfo*>(
               &_ObjectInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ObjectInfo& a, ObjectInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectInfo* New() const final {
    return new ObjectInfo();
  }

  ObjectInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectInfo& from);
  void MergeFrom(const ObjectInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.ObjectInfo";
  }
  protected:
  explicit ObjectInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVTargetPosFieldNumber = 4,
    kMatWorldFieldNumber = 5,
    kIObjectIDFieldNumber = 1,
    kILevelFieldNumber = 2,
    kILayerFieldNumber = 3,
  };
  // repeated float vTargetPos = 4 [packed = true];
  int vtargetpos_size() const;
  private:
  int _internal_vtargetpos_size() const;
  public:
  void clear_vtargetpos();
  private:
  float _internal_vtargetpos(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_vtargetpos() const;
  void _internal_add_vtargetpos(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_vtargetpos();
  public:
  float vtargetpos(int index) const;
  void set_vtargetpos(int index, float value);
  void add_vtargetpos(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      vtargetpos() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_vtargetpos();

  // repeated float matWorld = 5 [packed = true];
  int matworld_size() const;
  private:
  int _internal_matworld_size() const;
  public:
  void clear_matworld();
  private:
  float _internal_matworld(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_matworld() const;
  void _internal_add_matworld(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_matworld();
  public:
  float matworld(int index) const;
  void set_matworld(int index, float value);
  void add_matworld(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      matworld() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_matworld();

  // uint32 iObjectID = 1;
  void clear_iobjectid();
  ::PROTOBUF_NAMESPACE_ID::uint32 iobjectid() const;
  void set_iobjectid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_iobjectid() const;
  void _internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 iLevel = 2;
  void clear_ilevel();
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel() const;
  void set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilevel() const;
  void _internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 iLayer = 3;
  void clear_ilayer();
  ::PROTOBUF_NAMESPACE_ID::int32 ilayer() const;
  void set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ilayer() const;
  void _internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.ObjectInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > vtargetpos_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > matworld_;
  ::PROTOBUF_NAMESPACE_ID::uint32 iobjectid_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilevel_;
  ::PROTOBUF_NAMESPACE_ID::int32 ilayer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Player

// uint64 id = 1;
inline void Player::clear_id() {
  id_ = uint64_t{0u};
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Player::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Player::id() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.id)
  return _internal_id();
}
inline void Player::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void Player::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Protocol.Player.id)
}

// string name = 2;
inline void Player::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Player::name() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Player::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.Player.name)
}
inline std::string* Player::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Protocol.Player.name)
  return _internal_mutable_name();
}
inline const std::string& Player::_internal_name() const {
  return name_.Get();
}
inline void Player::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Player::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Player::release_name() {
  // @@protoc_insertion_point(field_release:Protocol.Player.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Player::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Protocol.Player.name)
}

// .Protocol.PlayerType playerType = 3;
inline void Player::clear_playertype() {
  playertype_ = 0;
}
inline ::Protocol::PlayerType Player::_internal_playertype() const {
  return static_cast< ::Protocol::PlayerType >(playertype_);
}
inline ::Protocol::PlayerType Player::playertype() const {
  // @@protoc_insertion_point(field_get:Protocol.Player.playerType)
  return _internal_playertype();
}
inline void Player::_internal_set_playertype(::Protocol::PlayerType value) {
  
  playertype_ = value;
}
inline void Player::set_playertype(::Protocol::PlayerType value) {
  _internal_set_playertype(value);
  // @@protoc_insertion_point(field_set:Protocol.Player.playerType)
}

// -------------------------------------------------------------------

// ObjectInfo

// uint32 iObjectID = 1;
inline void ObjectInfo::clear_iobjectid() {
  iobjectid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectInfo::_internal_iobjectid() const {
  return iobjectid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ObjectInfo::iobjectid() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.iObjectID)
  return _internal_iobjectid();
}
inline void ObjectInfo::_internal_set_iobjectid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  iobjectid_ = value;
}
inline void ObjectInfo::set_iobjectid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_iobjectid(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.iObjectID)
}

// int32 iLevel = 2;
inline void ObjectInfo::clear_ilevel() {
  ilevel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectInfo::_internal_ilevel() const {
  return ilevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectInfo::ilevel() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.iLevel)
  return _internal_ilevel();
}
inline void ObjectInfo::_internal_set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilevel_ = value;
}
inline void ObjectInfo::set_ilevel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilevel(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.iLevel)
}

// int32 iLayer = 3;
inline void ObjectInfo::clear_ilayer() {
  ilayer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectInfo::_internal_ilayer() const {
  return ilayer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectInfo::ilayer() const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.iLayer)
  return _internal_ilayer();
}
inline void ObjectInfo::_internal_set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ilayer_ = value;
}
inline void ObjectInfo::set_ilayer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ilayer(value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.iLayer)
}

// repeated float vTargetPos = 4 [packed = true];
inline int ObjectInfo::_internal_vtargetpos_size() const {
  return vtargetpos_.size();
}
inline int ObjectInfo::vtargetpos_size() const {
  return _internal_vtargetpos_size();
}
inline void ObjectInfo::clear_vtargetpos() {
  vtargetpos_.Clear();
}
inline float ObjectInfo::_internal_vtargetpos(int index) const {
  return vtargetpos_.Get(index);
}
inline float ObjectInfo::vtargetpos(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.vTargetPos)
  return _internal_vtargetpos(index);
}
inline void ObjectInfo::set_vtargetpos(int index, float value) {
  vtargetpos_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.vTargetPos)
}
inline void ObjectInfo::_internal_add_vtargetpos(float value) {
  vtargetpos_.Add(value);
}
inline void ObjectInfo::add_vtargetpos(float value) {
  _internal_add_vtargetpos(value);
  // @@protoc_insertion_point(field_add:Protocol.ObjectInfo.vTargetPos)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectInfo::_internal_vtargetpos() const {
  return vtargetpos_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectInfo::vtargetpos() const {
  // @@protoc_insertion_point(field_list:Protocol.ObjectInfo.vTargetPos)
  return _internal_vtargetpos();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectInfo::_internal_mutable_vtargetpos() {
  return &vtargetpos_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectInfo::mutable_vtargetpos() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.ObjectInfo.vTargetPos)
  return _internal_mutable_vtargetpos();
}

// repeated float matWorld = 5 [packed = true];
inline int ObjectInfo::_internal_matworld_size() const {
  return matworld_.size();
}
inline int ObjectInfo::matworld_size() const {
  return _internal_matworld_size();
}
inline void ObjectInfo::clear_matworld() {
  matworld_.Clear();
}
inline float ObjectInfo::_internal_matworld(int index) const {
  return matworld_.Get(index);
}
inline float ObjectInfo::matworld(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.ObjectInfo.matWorld)
  return _internal_matworld(index);
}
inline void ObjectInfo::set_matworld(int index, float value) {
  matworld_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.ObjectInfo.matWorld)
}
inline void ObjectInfo::_internal_add_matworld(float value) {
  matworld_.Add(value);
}
inline void ObjectInfo::add_matworld(float value) {
  _internal_add_matworld(value);
  // @@protoc_insertion_point(field_add:Protocol.ObjectInfo.matWorld)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectInfo::_internal_matworld() const {
  return matworld_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
ObjectInfo::matworld() const {
  // @@protoc_insertion_point(field_list:Protocol.ObjectInfo.matWorld)
  return _internal_matworld();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectInfo::_internal_mutable_matworld() {
  return &matworld_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
ObjectInfo::mutable_matworld() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.ObjectInfo.matWorld)
  return _internal_mutable_matworld();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
